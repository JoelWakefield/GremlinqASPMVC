@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Graph</h1>

    <div id="relationships-container">
        <div id="relationships-header" class="mb-4 row justify-content-around">
            <div class="col-4">
                <div>Parent</div>
                <div>@Html.DropDownList("SelectParent", ViewData["Parents"] as IEnumerable<SelectListItem>)</div>
            </div>
            <div class="col-3">
                <div>Relationship</div>
                <div>@Html.DropDownList("SelectRelationship", ViewData["Relationships"] as IEnumerable<SelectListItem>)</div>
            </div>
            <div class="col-4">
                <div>Child</div>
                <div>@Html.DropDownList("SelectChild", ViewData["Children"] as IEnumerable<SelectListItem>)</div>
            </div>
        </div>

        <div id="relationships-body" class="row justify-content-between">
            <div id="parent-list" class="col-4">
                
            </div>
            <div id="relationship-list" class="col-4">
                <canvas id="relationship-canvas" width="200" height="100"
                        style="border:1px solid #000000;">
                </canvas>
            </div>
            <div id="child-list" class="col-4">
                
            </div>
        </div>
    </div>
</div>

<style>
    #relationships-body {
        margin: 0 auto;
        width: 100%;
    }
    .vertex {
        background-color: aliceblue;
        border: solid 1px blue;
        border-radius: 8px;
        margin-bottom: 1em;
    }
</style>

<script>
    const selectors = {
        PARENT: 'p',
        RELATIONSHIPS: 'r',
        CHILD: 'c'
    }

    const selectParent = document.getElementById("SelectParent");
    const selectRelationship = document.getElementById("SelectRelationship");
    const selectChild = document.getElementById("SelectChild");

    const parentList = document.getElementById("parent-list");
    const relationshipList = document.getElementById("relationship-list");
    const childList = document.getElementById("child-list");

    var c = document.getElementById("relationship-canvas");
    var ctx = c.getContext("2d");


    selectParent.addEventListener("mouseup", (_) => filterOtherOptions(selectParent, selectors.PARENT));
    selectRelationship.addEventListener("mouseup", (_) => filterOtherOptions(selectRelationship, selectors.RELATIONSHIPS));
    selectChild.addEventListener("mouseup", (_) => filterOtherOptions(selectChild, selectors.CHILD));

    parentList.addEventListener('click', (e) => {
        if (e.target !== e.currentTarget) {
            var id = e.target.childNodes[1].textContent;

            fetch(`/Home/GetVertex/${id}`)
                .then(response => response.json())
                .then(data => {
                    clearList(parentList);
                    clearList(childList);

                    var { connections, parents, children } = constructConnections(data);
                    connectVertices(connections);
                    console.log(connections, parents, children);

                    parents.forEach(p => createVertex(p, parentList));
                    children.forEach(c => createVertex(c, childList));
                });
        }
    });

    function constructConnections(list) {
        var connections = [];
        var parentIds = [];
        var childIds = [];
        var parents = [];
        var children = [];

        for (var i = 0; i < list.length; i++) {
            //  get parent index
            var parentInd = parentIds.findIndex(p => p === list[i][0]['id']);
            //console.log('p',parents, parentInd);

            if (parentInd < 0) {
                parentInd = parentIds.length;
                parentIds.push(list[i][0]['id']);
                parents.push(list[i][0]);
            }

            //  get child index
            var childInd = childIds.findIndex(c => c === list[i][1]['id']);
            //console.log('c',children, childInd);

            if (childInd < 0) {
                childInd = childIds.length;
                childIds.push(list[i][1]['id']);
                children.push(list[i][1]);
            }

            //  Add indices to the connections
            connections.push({ parentInd, childInd });
        }

        return { connections, parents, children };
    }

    function connectVertices(vPairs) {
        var w = c.clientWidth;
        var h = 41;
        var b = 12;

        vPairs.forEach(pair => {
            ctx.moveTo(0, pair.parentInd * h + b);
            ctx.lineTo(w, pair.childInd * h + b);
        });

        ctx.lineWidth = 4;
        ctx.stroke();
    }

    relationshipList.addEventListener('click', (e) => {
        if (e.target !== e.currentTarget) {
            var id = e.target.childNodes[1].textContent;

            fetch(`/Home/GetEdge/${id}`).
                then(response => response.json()).
                then(data => {
                    //  remove all children before adding more
                    if (clearlist)
                        while (parent.firstChild)
                            parent.removeChild(parent.firstChild);

                    //  add new vertices
                    urls.forEach(url => buildFunc(url, parent));
                });
        }
    });

    function filterOtherOptions(ele, select) {
        var text = ele.options[ele.selectedIndex].text;

        if (text.toLowerCase() === 'all') {
            selectParent.value = "All";
            selectRelationship.value = "All";
            selectChild.value = "All";

            resetElements(
                ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
                parentList,
                buildVertices);

            resetElements(
                ['/Home/GetKnows', '/Home/GetOwns', '/Home/GetCreated'],
                relationshipList,
                buildEdges);

            resetElements(
                ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
                childList,
                buildVertices);

            return;
        }

        switch (select) {
            case selectors.PARENT:
                var rel, ch;

                switch (text.toLowerCase()) {
                    case 'person':
                        rel = ["Knows"];
                        ch = ["Person"];

                        resetElements(
                            ['/Home/GetPeople'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetKnows', '/Home/GetOwns', '/Home/GetCreated'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
                            childList,
                            buildVertices);

                        break;
                    case 'pet':
                        rel = ["Owns"];
                        ch = ["Person"];

                        resetElements(
                            ['/Home/GetPets'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetOwns'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPeople'],
                            childList,
                            buildVertices);

                        break;
                    case 'software':
                        rel = ["Created"];
                        ch = ["Person"];

                        resetElements(
                            ['/Home/GetSoftwares'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetCreated'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPeople'],
                            childList,
                            buildVertices);
                }
                selectRelationship.value = rel;
                selectChild.value = ch;

                break;
            case selectors.RELATIONSHIPS:
                var par, ch;

                switch (text.toLowerCase()) {
                    case 'knows':
                        par = ["Person"];
                        ch = ["Person"];

                        resetElements(
                            ['/Home/GetPeople'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetKnows'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPeople'],
                            childList,
                            buildVertices);

                        break;
                    case 'owns':
                        par = ["Person"];
                        ch = ["Pet"];

                        resetElements(
                            ['/Home/GetPeople'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetOwns'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPets'],
                            childList,
                            buildVertices);

                        break;
                    case 'created':
                        par = ["Person"];
                        ch = ["Software"];

                        resetElements(
                            ['/Home/GetPeople'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetCreated'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetSoftwares'],
                            childList,
                            buildVertices);

                }
                selectParent.value = par;
                selectChild.value = ch;

                break;
            case selectors.CHILD:
                var par, rel;

                switch (text.toLowerCase()) {
                    case 'person':
                        par = ["Person"];
                        rel = ["Knows"];

                        resetElements(
                            ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetKnows', '/Home/GetOwns', '/Home/GetCreated'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPeople'],
                            childList,
                            buildVertices);

                        break;
                    case 'pet':
                        par = ["Person"];
                        rel = ["Owns"];

                        resetElements(
                            ['/Home/GetPeople'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetOwns'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetPets'],
                            childList,
                            buildVertices);

                        break;
                    case 'software':
                        par = ["Person"];
                        rel = ["Created"];

                        resetElements(
                            ['/Home/GetPeople'],
                            parentList,
                            buildVertices);

                        resetElements(
                            ['/Home/GetCreated'],
                            relationshipList,
                            buildEdges);

                        resetElements(
                            ['/Home/GetSoftwares'],
                            childList,
                            buildVertices);
                }
                selectParent.value = par;
                selectRelationship.value = rel;
        }
    }


    function createVertex(v, listElement) {
        console.log(v, listElement);

        let div = document.createElement('div');
        let hidden = document.createElement('div');

        hidden.style.display = 'none';
        hidden.textContent = v.id;

        div.classList.add('vertex');
        div.textContent = (typeof v.name === typeof String()) ?
            v.name :
            v.name?.value;

        div.appendChild(hidden);
        listElement.appendChild(div);
    }

    function createEdge(e, listElement) {
        let div = document.createElement('div');
        let hidden = document.createElement('div');

        hidden.style.display = 'none';
        hidden.textContent = e.id;

        div.classList.add('vertex');
        div.textContent = e.label;

        div.appendChild(hidden);
        listElement.appendChild(div);
    }

    function clearList(list) {
        while (list.firstChild)
            list.removeChild(list.firstChild);
    }

    function buildVertices(url, parentElement) {
        fetch(url)
            .then(response => response.json())
            .then(data => data.forEach(v => {
                createVertex(v, parentElement);
            }));
    }

    function buildEdges(url, parentElement) {
        fetch(url)
            .then(response => response.json())
            .then(data => data.forEach(e => {
                createEdge(e, parentElement);
            }));
    }

    function resetElements(urls, parent, buildFunc, clearlist = true) {
        //  remove all children before adding more
        if (clearlist)
            while (parent.firstChild)
                parent.removeChild(parent.firstChild);

        //  add new vertices
        urls.forEach(url => buildFunc(url, parent));
    }


    function resizeCanvas() {
        c.width = relationshipList.clientWidth - 30;
        c.height = window.innerHeight / 2;
    }

    window.onresize = resizeCanvas;

    resizeCanvas();
    

    resetElements(
        ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
        parentList,
        buildVertices,
        false);

    resetElements(
        ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
        childList,
        buildVertices,
        false);

</script>