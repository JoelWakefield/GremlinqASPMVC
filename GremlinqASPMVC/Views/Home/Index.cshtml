@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Graph</h1>

    <div id="relationships-container">
        <div id="relationships-header" class="mb-4 row justify-content-around">
            <div class="col-4">
                <div>Parent</div>
                <div>@Html.DropDownList("SelectParent", ViewData["Parents"] as IEnumerable<SelectListItem>)</div>
            </div>
            <div class="col-3">
                <div>Relationship</div>
                <div>@Html.DropDownList("SelectRelationship", ViewData["Relationships"] as IEnumerable<SelectListItem>)</div>
            </div>
            <div class="col-4">
                <div>Child</div>
                <div>@Html.DropDownList("SelectChild", ViewData["Children"] as IEnumerable<SelectListItem>)</div>
            </div>
        </div>

        <div id="relationships-body" class="row justify-content-between">
            <div id="parent-list" class="col-4">
                
            </div>
            <div id="relationship-list" class="col-4">
                <canvas id="relationship-canvas" width="200" height="100"
                        style="border:1px solid #000000;">
                </canvas>
            </div>
            <div id="child-list" class="col-4">
                
            </div>
        </div>
    </div>
</div>

<style>
    #relationships-body {
        margin: 0 auto;
        width: 100%;
    }
    .vertex {
        display: flex;
        justify-content: space-between;
        background-color: aliceblue;
        border: solid 1px blue;
        border-radius: 8px;
        margin-bottom: 1em;
    }
    .vert-item {
        display: inline-block;
        margin: 0 1em;
    }
</style>

<script>
    const relationshipType = {
        KN: '1:n',
        NK: 'n:1',
        NN: 'n:n'
    }

    const selectors = {
        PARENT: 'p',
        RELATIONSHIPS: 'r',
        CHILD: 'c'
    }

    const selectParent = document.getElementById("SelectParent");
    const selectRelationship = document.getElementById("SelectRelationship");
    const selectChild = document.getElementById("SelectChild");

    const parentList = document.getElementById("parent-list");
    const relationshipList = document.getElementById("relationship-list");
    const childList = document.getElementById("child-list");

    var c = document.getElementById("relationship-canvas");
    var ctx = c.getContext("2d");

    var connections = [];
    var parentIds = [];
    var childIds = [];


    selectParent.addEventListener("mouseup", (_) => filterOtherOptions(selectParent, selectors.PARENT));
    selectRelationship.addEventListener("mouseup", (_) => filterOtherOptions(selectRelationship, selectors.RELATIONSHIPS));
    selectChild.addEventListener("mouseup", (_) => filterOtherOptions(selectChild, selectors.CHILD));


    parentList.addEventListener('click', (e) => {
        if (e.target !== e.currentTarget) {
            displayConnections(buildUrls(e));
        }
    });

    childList.addEventListener('click', (e) => {
        if (e.target !== e.currentTarget) {
            displayConnections(buildUrls(e, false));
        }
    });

    relationshipList.addEventListener('click', (e) => {
        if (e.target !== e.currentTarget) {
            //console.log(buildUrls(e, relationshipType.NN));
            //displayConnections(buildUrls(e, relationshipType.NN));
        }
    });


    function buildUrls(e, isParent = true) {
        console.log(e.target);
        var id = e.target.childNodes[2].textContent;
        var actionType = e.target.childNodes[1].textContent;

        var rType = isParent ? "1:n" : "n:1";
        console.log(id, actionType);
        switch (actionType) {
            case "Person":
                return [
                    `Home/Knows/${id}/${rType}`,
                    `Home/Owns/${id}/${rType}`,
                    `Home/Created/${id}/${rType}`
                ];
            case "Pet":
            case "Cat":
            case "Dog":
                return [
                    `Home/Owns/${id}/${rType}`
                ];
            case "Software":
                return [
                    `Home/Created/${id}/${rType}`
                ];
            default:
                console.error('could not define relationship');
                return null;
        }
    }

    function constructConnections(list) {
        var conn = [];
        var parents = [];
        var children = [];

        for (var i = 0; i < list.length; i++) {
            //  get parent index
            var parentInd = parentIds.findIndex(p => p === list[i][0]['id']);

            if (parentInd < 0) {
                parentInd = parentIds.length;
                parentIds.push(list[i][0]['id']);
                parents.push(list[i][0]);
            }

            //  get child index
            var childInd = childIds.findIndex(c => c === list[i][1]['id']);

            if (childInd < 0) {
                childInd = childIds.length;
                childIds.push(list[i][1]['id']);
                children.push(list[i][1]);
            }

            //  Add indices to the connections
            conn.push({ parentInd, childInd });
        }

        return { conn, parents, children };
    }

    function connectVertices(vPairs) {
        var w = c.clientWidth;
        var h = 41;
        var b = 12;

        vPairs.forEach(pair => {
            ctx.moveTo(0, pair.parentInd * h + b);
            ctx.lineTo(w, pair.childInd * h + b);
        });

        ctx.lineWidth = 4;
        ctx.stroke();
    }

    function displayConnections(urls) {
        //  Clear current verts and lines
        clearList(parentList);
        clearList(childList);

        ctx.clearRect(0, 0, c.width, c.height);
        ctx.beginPath();

        parentIds = [];
        childIds = [];

        urls.forEach(url => {
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    //  configure vertices
                    var { conn, parents, children } = constructConnections(data);
                    connections.push(...conn);
                    //console.log(connections, parents, children);

                    //  Display
                    connectVertices(conn);
                    parents.forEach(p => createVertex(p, parentList));
                    children.forEach(c => createVertex(c, childList));
                })
        });
    }



    function filterOtherOptions(ele, select) {
        var text = ele.options[ele.selectedIndex].text;

        if (text.toLowerCase() === 'all') {
            selectParent.value = "All";
            selectRelationship.value = "All";
            selectChild.value = "All";

            displayConnections([
                'Home/Knows',
                'Home/Owns',
                'Home/Created'
            ]);

            return;
        }

        switch (select) {
            case selectors.RELATIONSHIPS:
                var par, ch;

                switch (text.toLowerCase()) {
                    case 'knows':
                        par = ["Person"];
                        ch = ["Person"];

                        displayConnections([
                            'Home/Knows'
                        ]);

                        break;
                    case 'owns':
                        par = ["Person"];
                        ch = ["Pet"];

                        displayConnections([
                            'Home/Owns'
                        ]);

                        break;
                    case 'created':
                        par = ["Person"];
                        ch = ["Software"];

                        displayConnections([
                            'Home/Created'
                        ]);
                }
                selectParent.value = par;
                selectChild.value = ch;

                break;
            default:
                var par, rel;

                switch (text.toLowerCase()) {
                    case 'person':
                        par = ["Person"];
                        rel = ["Knows"];

                        displayConnections([
                            'Home/Knows'
                        ]);

                        break;
                    case 'pet':
                        par = ["Person"];
                        rel = ["Owns"];

                        displayConnections([
                            'Home/Owns'
                        ]);

                        break;
                    case 'software':
                        par = ["Person"];
                        rel = ["Created"];

                        displayConnections([
                            'Home/Created'
                        ]);
                }
                selectParent.value = par;
                selectRelationship.value = rel;
        }
    }


    function createVertex(v, listElement) {
        let vert = document.createElement('div');
        vert.classList.add('vertex');
        listElement.appendChild(vert);

        let name = document.createElement('div');
        name.classList.add('vert-item');
        name.textContent = (typeof v.name === typeof String()) ?
            v.name :
            v.name?.value;
        vert.appendChild(name);

        let label = document.createElement('div');
        label.classList.add('vert-item');
        label.textContent = v.label;
        vert.appendChild(label);

        let id = document.createElement('div');
        id.style.display = 'none';
        id.textContent = v.id;
        vert.appendChild(id);
    }

    //function createEdge(e, listElement) {
    //    let div = document.createElement('div');
    //    let hidden = document.createElement('div');

    //    hidden.style.display = 'none';
    //    hidden.textContent = e.id;

    //    div.classList.add('vertex');
    //    div.textContent = e.label;

    //    div.appendChild(hidden);
    //    listElement.appendChild(div);
    //}


    //function buildVertices(url, parentElement) {
    //    fetch(url)
    //        .then(response => response.json())
    //        .then(data => data.forEach(v => {
    //            createVertex(v, parentElement);
    //        }));
    //}

    //function buildEdges(url, parentElement) {
    //    fetch(url)
    //        .then(response => response.json())
    //        .then(data => data.forEach(e => {
    //            createEdge(e, parentElement);
    //        }));
    //}

    //function resetElements(urls, parent, buildFunc, clearlist = true) {
    //    //  remove all children before adding more
    //    if (clearlist)
    //        while (parent.firstChild)
    //            parent.removeChild(parent.firstChild);

    //    //  add new vertices
    //    urls.forEach(url => buildFunc(url, parent));
    //}


    function clearList(list) {
        while (list.firstChild)
            list.removeChild(list.firstChild);
    }

    function resizeCanvas() {
        c.width = relationshipList.clientWidth - 30;
        c.height = window.innerHeight / 2;

        //  redraw the connections
        connectVertices(connections);
    }


    window.onresize = resizeCanvas;

    resizeCanvas();
    
    displayConnections([
        'Home/Knows',
        'Home/Owns',
        'Home/Created'
    ]);

</script>