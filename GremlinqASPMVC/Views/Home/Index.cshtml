@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Graph</h1>

    <div id="relationships-container">
        <div id="relationships-header" class="mb-4 row justify-content-around">
            <div class="col-4">
                <div>Parent</div>
                <div>@Html.DropDownList("SelectParent", ViewData["Parents"] as IEnumerable<SelectListItem>)</div>
            </div>
            <div class="col-3">
                <div>Relationship</div>
                <div>@Html.DropDownList("SelectRelationship", ViewData["Relationships"] as IEnumerable<SelectListItem>)</div>
            </div>
            <div class="col-4">
                <div>Child</div>
                <div>@Html.DropDownList("SelectChild", ViewData["Children"] as IEnumerable<SelectListItem>)</div>
            </div>
        </div>

        <div id="relationships-body" class="row justify-content-between">
            <div id="parent-list" class="col-4">
                
            </div>
            <div id="relationship-list" class="col-3">
                
            </div>
            <div id="child-list" class="col-4">
                
            </div>
        </div>
    </div>
</div>

<style>
    #relationships-body {
        margin: 0 auto;
        width: 100%;
    }
    .vertex {
        background-color: aliceblue;
        border: solid 1px blue;
        border-radius: 8px;
        margin-bottom: 1em;
    }
</style>

<script>
    const selectors = {
        PARENT: 'p',
        RELATIONSHIPS: 'r',
        CHILD: 'c'
    }

    const selectParent = document.getElementById("SelectParent");
    const selectRelationship = document.getElementById("SelectRelationship");
    const selectChild = document.getElementById("SelectChild");

    const parentList = document.getElementById("parent-list");
    const relationshipList = document.getElementById("relationship-list");
    const childList = document.getElementById("child-list");

    selectParent.addEventListener("mouseup", (_) => filterOtherOptions(selectParent, selectors.PARENT));
    selectRelationship.addEventListener("mouseup", (_) => filterOtherOptions(selectRelationship, selectors.RELATIONSHIPS));
    selectChild.addEventListener("mouseup", (_) => filterOtherOptions(selectChild, selectors.CHILD));

    function filterOtherOptions(ele, select) {
        var text = ele.options[ele.selectedIndex].text;

        if (text.toLowerCase() === 'all') {
            selectParent.value = "All";
            selectRelationship.value = "All";
            selectChild.value = "All";

            resetElements(
                ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
                parentList,
                buildVertices);

            resetElements(
                ['/Home/GetKnows', '/Home/GetOwns', '/Home/GetCreated'],
                relationshipList,
                buildEdges);

            resetElements(
                ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
                childList,
                buildVertices);

            return;
        }

        switch (select) {
            case selectors.PARENT:
                var rel, ch;

                switch (text.toLowerCase()) {
                    case 'person':
                        rel = ["Knows"];
                        ch = ["Person"];
                        break;
                    case 'pet':
                        rel = ["Owns"];
                        ch = ["Person"];
                        break;
                    case 'software':
                        rel = ["Created"];
                        ch = ["Person"];
                }
                selectRelationship.value = rel;
                selectChild.value = ch;

                break;
            case selectors.RELATIONSHIPS:
                var par, ch;

                switch (text.toLowerCase()) {
                    case 'knows':
                        par = ["Person"];
                        ch = ["Person"];
                        break;
                    case 'owns':
                        par = ["Person"];
                        ch = ["Pet"];
                        break;
                    case 'created':
                        par = ["Person"];
                        ch = ["Software"];
                }
                selectParent.value = par;
                selectChild.value = ch;

                break;
            case selectors.CHILD:
                var par, rel;

                switch (text.toLowerCase()) {
                    case 'person':
                        par = ["Person"];
                        rel = ["Knows"];
                        break;
                    case 'pet':
                        par = ["Person"];
                        rel = ["Owns"];
                        break;
                    case 'software':
                        par = ["Person"];
                        rel = ["Created"];
                }
                selectParent.value = par;
                selectRelationship.value = rel;
        }
    }


    function createVertex(text, listElement) {
        let div = document.createElement('div');
        div.classList.add('vertex');
        div.textContent = text;

        listElement.appendChild(div);
    }

    function createEdge(text, listElement) {
        let div = document.createElement('div');
        div.classList.add('vertex');
        div.textContent = text;

        listElement.appendChild(div);
    }

    function buildVertices(url, parentElement) {
        fetch(url)
            .then(response => response.json())
            .then(data => data.forEach(v => {
                var name = (typeof v.name === typeof String()) ?
                    v.name :
                    v.name.value;
                createVertex(name, parentElement);
            }));
    }

    function buildEdges(url, parentElement) {
        fetch(url)
            .then(response => response.json())
            .then(data => data.forEach(v => {
                createEdge(v.label, parentElement);
            }));
    }

    function resetElements(urls, parent, buildFunc, clearlist = true) {
        //  remove all children before adding more
        if (clearlist)
            while (parent.firstChild)
                parent.removeChild(parent.firstChild);

        //  add new vertices
        urls.forEach(url => buildFunc(url, parent));
    }


    resetElements(
        ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
        parentList,
        buildVertices,
        false);

    resetElements(
        ['/Home/GetKnows', '/Home/GetOwns', '/Home/GetCreated'],
        relationshipList,
        buildEdges,
        false);

    resetElements(
        ['/Home/GetPeople', '/Home/GetPets', '/Home/GetSoftwares'],
        childList,
        buildVertices,
        false);
</script>